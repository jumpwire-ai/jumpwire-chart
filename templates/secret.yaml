{{- $fullName := printf "%s-secrets" (include "jumpwire.fullname" .) -}}
# retrieve the secret data using lookup function and when not exists, return an empty dictionary / map as result
{{- $secretObj := (lookup "v1" "Secret" .Release.Namespace $fullName) | default dict }}
{{- $secretData := (get $secretObj "data") | default dict }}
# use existing secret data or generate a random one when not exists
{{- $sessionKey := (get $secretData "JUMPWIRE_SESSION_KEY") | default (randAlphaNum 32 | b64enc) }}
{{- $releaseCookie := (get $secretData "RELEASE_COOKIE") | default (randAlphaNum 32 | b64enc) }}
kind: Secret
apiVersion: v1
metadata:
  name: {{ $fullName }}
  labels:
    {{- include "jumpwire.labels" . | nindent 4 }}
data:
  JUMPWIRE_TOKEN: {{ .Values.token | b64enc }}
  {{- if .Values.aws.access_key_id }}
  AWS_ACCESS_KEY_ID: {{ .Values.aws.access_key_id | b64enc }}
  {{- end }}
  {{- if .Values.aws.secret_access_key }}
  AWS_SECRET_ACCESS_KEY: {{ .Values.aws.secret_access_key | b64enc }}
  {{- end }}
  {{- if .Values.encryptionKey }}
  JUMPWIRE_ENCRYPTION_KEY: {{ .Values.encryptionKey | b64enc }}
  {{- end }}
  JUMPWIRE_SESSION_KEY: {{ $sessionKey }}
  RELEASE_COOKIE: {{ $releaseCookie }}
  {{- if .Values.vault.token }}
  VAULT_TOKEN: {{ .Values.vault.token | b64enc }}
  {{- end }}
  {{- if .Values.vault.app_role.role_id }}
  VAULT_APPROLE_ID: {{ .Values.vault.app_role.role_id | b64enc }}
  {{- end }}
  {{- if .Values.vault.app_role.secret_id }}
  VAULT_APPROLE_SECRET: {{ .Values.vault.app_role.secret_id | b64enc }}
  {{- end }}
